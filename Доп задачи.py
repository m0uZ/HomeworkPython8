# Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык. Например:
# num_translate("one")
# "один"
# num_translate("eight")
# "восемь"
# Если перевод сделать невозможно, вернуть None. Подумайте, как и где лучше хранить информацию, необходимую для перевода: какой тип данных выбрать, в теле функции или снаружи.
# 2. * (вместо задачи 1) Доработать предыдущую функцию в num_translate_adv(): реализовать корректную работу с числительными, начинающимися с заглавной буквы — результат тоже должен быть с заглавной. Например:
# num_translate_adv("One")
# "Один"
# num_translate_adv("two")
# "два"

# number = input('Введите число от 0 до 10 по английски: ')
# def translate(number):

#     translate = {'one': 'один', 'two': 'второе', 'three': 'три', 'four': 'четыре', 'five': 'пять', 'six': 'шесть',
#                 'seven': 'семь', 'eight': 'восемь', 'nine': 'девять', 'ten': 'десять', 'zero': 'ноль'}
#     if number not in translate:
#         print('None')
#     else:
#         print(f'{number.capitalize()} по русски: {translate[number].capitalize()}')

# translate(number)

# Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь, 
# в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы. Например:
# thesaurus("Иван", "Мария", "Петр", "Илья")
# {
# "И": ["Иван", "Илья"],
# "М": ["Мария"], "П": ["Петр"]
# }
# Подумайте: полезен ли будет вам оператор распаковки? Как поступить, если потребуется сортировка по ключам? 
# Можно ли использовать словарь в этом случае?

# def thesaurus(*args):
#     some_list = list(args)
#     some_dict = {}
#     for i in range(len(some_list)):
#         if some_list[i][0] in some_dict.keys():
#             some_dict[some_list[i][0]].append(some_list[i])
#         else:
#             some_dict[some_list[i][0]] = [some_list[i]]
#     print(some_dict)
# thesaurus("Иван", "Илона", "Петр", "Миша", "Петро", "Саша")

# Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в формате «Имя Фамилия» и возвращающую словарь, 
# в котором ключи — первые буквы фамилий, а значения — словари, реализованные по схеме предыдущего задания и содержащие записи, 
# в которых фамилия начинается с соответствующей буквы. Например:
# thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
# {
# "А": {
# "П": ["Петр Алексеев"]
# },
# "И": {
# "И": ["Илья Иванов"]
# },
# "С": {
# "И": ["Иван Сергеев", "Инна Серова"],
# "А": ["Анна Савельева"]
# }
# }
# Как поступить, если потребуется сортировка по ключам?

# def thesaurus_adv(*args):
    
#     out_dict = {}
#     for elem in args:
#         name, second_name = elem.split()
#         if not out_dict.get(second_name[0]):
#             out_dict[second_name[0]] = { name[0] : [elem] }
#         elif not out_dict[second_name[0]].get(name[0]):
#             (out_dict[second_name[0]])[name[0]] = [elem]
#         else:
#             (out_dict[second_name[0]])[name[0]].append(elem)

#     return out_dict




